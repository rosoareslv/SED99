/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
package org.elasticsearch.watcher.transport.actions.execute;

import org.elasticsearch.action.ActionResponse;
import org.elasticsearch.common.Nullable;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.xcontent.XContentHelper;

import java.io.IOException;
import java.util.Map;

/**
 * This class contains the WatchHistory generated by running the watch
 */
public class ExecuteWatchResponse extends ActionResponse {

    private BytesReference watchRecordSource;

    private Map<String, Object> watchRecordAsMap;

    public ExecuteWatchResponse() {
    }

    public ExecuteWatchResponse(@Nullable BytesReference watchRecordSource) {
        this.watchRecordSource = watchRecordSource;
    }

    /**
     * @return The watch record bytes reference
     */
    public BytesReference getWatchRecordSource() {
        return watchRecordSource;
    }

    /**
     * @return a map representation of the watch record
     */
    public Map<String, Object> getWatchRecordAsMap() {
        if (watchRecordSource == null) {
            return null;
        }
        if (watchRecordAsMap != null) {
            return watchRecordAsMap;
        }

        watchRecordAsMap = XContentHelper.convertToMap(watchRecordSource, true).v2();
        return watchRecordAsMap;
    }

    @Override
    public void readFrom(StreamInput in) throws IOException {
        super.readFrom(in);
        watchRecordSource = in.readBoolean() ? in.readBytesReference() : null;
    }

    @Override
    public void writeTo(StreamOutput out) throws IOException {
        super.writeTo(out);
        out.writeBoolean(watchRecordSource != null);
        if (watchRecordSource != null) {
            out.writeBytesReference(watchRecordSource);
        }
    }
}
