# coding=utf-8

from sympy.printing.tree import tree


def test_print_tree_MatAdd():
    from sympy.matrices.expressions import MatrixSymbol, MatAdd
    A = MatrixSymbol('A', 3, 3)
    B = MatrixSymbol('B', 3, 3)

    test_str = [
        'MatAdd: A + B\n',
        'algebraic: False\n',
        'commutative: False\n',
        'complex: False\n',
        'composite: False\n',
        'even: False\n',
        'imaginary: False\n',
        'integer: False\n',
        'irrational: False\n',
        'negative: False\n',
        'noninteger: False\n',
        'nonnegative: False\n',
        'nonpositive: False\n',
        'nonzero: False\n',
        'odd: False\n',
        'positive: False\n',
        'prime: False\n',
        'rational: False\n',
        'real: False\n',
        'transcendental: False\n',
        'zero: False\n',
        '+-MatrixSymbol: A\n',
        '| algebraic: False\n',
        '| commutative: False\n',
        '| complex: False\n',
        '| composite: False\n',
        '| even: False\n',
        '| imaginary: False\n',
        '| integer: False\n',
        '| irrational: False\n',
        '| negative: False\n',
        '| noninteger: False\n',
        '| nonnegative: False\n',
        '| nonpositive: False\n',
        '| nonzero: False\n',
        '| odd: False\n',
        '| positive: False\n',
        '| prime: False\n',
        '| rational: False\n',
        '| real: False\n',
        '| transcendental: False\n',
        '| zero: False\n',
        '| +-Symbol: A\n',
        '| | commutative: True\n',
        '| +-Integer: 3\n',
        '| | algebraic: True\n',
        '| | commutative: True\n',
        '| | complex: True\n',
        '| | finite: True\n',
        '| | hermitian: True\n',
        '| | imaginary: False\n',
        '| | infinite: False\n',
        '| | integer: True\n',
        '| | irrational: False\n',
        '| | noninteger: False\n',
        '| | rational: True\n',
        '| | real: True\n',
        '| | transcendental: False\n',
        '| +-Integer: 3\n',
        '|   algebraic: True\n',
        '|   commutative: True\n',
        '|   complex: True\n',
        '|   finite: True\n',
        '|   hermitian: True\n',
        '|   imaginary: False\n',
        '|   infinite: False\n',
        '|   integer: True\n',
        '|   irrational: False\n',
        '|   noninteger: False\n',
        '|   rational: True\n',
        '|   real: True\n',
        '|   transcendental: False\n',
        '+-MatrixSymbol: B\n',
        '  algebraic: False\n',
        '  commutative: False\n',
        '  complex: False\n',
        '  composite: False\n',
        '  even: False\n',
        '  imaginary: False\n',
        '  integer: False\n',
        '  irrational: False\n',
        '  negative: False\n',
        '  noninteger: False\n',
        '  nonnegative: False\n',
        '  nonpositive: False\n',
        '  nonzero: False\n',
        '  odd: False\n',
        '  positive: False\n',
        '  prime: False\n',
        '  rational: False\n',
        '  real: False\n',
        '  transcendental: False\n',
        '  zero: False\n',
        '  +-Symbol: B\n',
        '  | commutative: True\n',
        '  +-Integer: 3\n',
        '  | algebraic: True\n',
        '  | commutative: True\n',
        '  | complex: True\n',
        '  | finite: True\n',
        '  | hermitian: True\n',
        '  | imaginary: False\n',
        '  | infinite: False\n',
        '  | integer: True\n',
        '  | irrational: False\n',
        '  | noninteger: False\n',
        '  | rational: True\n',
        '  | real: True\n',
        '  | transcendental: False\n',
        '  +-Integer: 3\n',
        '    algebraic: True\n',
        '    commutative: True\n',
        '    complex: True\n',
        '    finite: True\n',
        '    hermitian: True\n',
        '    imaginary: False\n',
        '    infinite: False\n',
        '    integer: True\n',
        '    irrational: False\n',
        '    noninteger: False\n',
        '    rational: True\n',
        '    real: True\n',
        '    transcendental: False\n'
    ]

    assert tree(A + B) == "".join(test_str)
